<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>fantomas</name></assembly>
<members>
<member name="T:Fantomas.IsPathIgnored">
<summary>
 The string argument is taken relative to the location
 of the ignore-file.
</summary>
</member>
<member name="M:Fantomas.Logging.logGrEqDetailed(System.String)">
<summary>
 log a message if the verbosity level is &gt;= Detailed
</summary>
</member>
<member name="M:Fantomas.Logging.elog(System.String)">
<summary>
 log an error
</summary>
</member>
<member name="M:Fantomas.Logging.stdlog(System.String)">
<summary>
 log a message
</summary>
</member>
<member name="P:Fantomas.IgnoreFileModule.current">
<summary>
 When executed from the command line, Fantomas will not dynamically locate
 the most appropriate `.fantomasignore` for each input file; it only finds
 a single `.fantomasignore` file. This is that file.
</summary>
</member>
<member name="M:Fantomas.IgnoreFileModule.find(System.IO.Abstractions.IFileSystem,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{Fantomas.AbsoluteFilePath,System.Boolean}},System.String)">
<summary>
 Find the `.fantomasignore` file above the given filepath, if one exists.
 Note that this is intended for use only in the daemon; the command-line tool
 does not support `.fantomasignore` files anywhere other than the current
 working directory.
</summary>
</member>
<member name="M:Fantomas.Format.checkCode(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs a check on the given files and reports the result to the given output:

 * It shows the paths of the files that need formatting
 * It shows the path and the error message of files that failed the format check

 Returns:

 A record with the file names that were formatted and the files that encounter problems while formatting.
</summary>
</member>
<member name="P:Fantomas.Daemon.FantomasDaemon.WaitForClose">
<summary>
 returns a hot task that resolves when the stream has terminated
</summary>
</member>
</members>
</doc>
